{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PermissionFile",
  "description": "Permission file that can define a default permission, a set of permissions or a list of inlined permissions.",
  "type": "object",
  "properties": {
    "default": {
      "description": "The default permission set for the plugin",
      "anyOf": [
        {
          "$ref": "#/definitions/DefaultPermission"
        },
        {
          "type": "null"
        }
      ]
    },
    "set": {
      "description": "A list of permissions sets defined",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PermissionSet"
      }
    },
    "permission": {
      "description": "A list of inlined permissions",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/Permission"
      }
    }
  },
  "definitions": {
    "DefaultPermission": {
      "description": "The default permission set of the plugin.\n\nWorks similarly to a permission with the \"default\" identifier.",
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "version": {
          "description": "The version of the permission.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 1.0
        },
        "description": {
          "description": "Human-readable description of what the permission does. Tauri convention is to use `<h4>` headings in markdown content for Tauri documentation generation purposes.",
          "type": [
            "string",
            "null"
          ]
        },
        "permissions": {
          "description": "All permissions this set contains.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionSet": {
      "description": "A set of direct permissions grouped together under a new name.",
      "type": "object",
      "required": [
        "description",
        "identifier",
        "permissions"
      ],
      "properties": {
        "identifier": {
          "description": "A unique identifier for the permission.",
          "type": "string"
        },
        "description": {
          "description": "Human-readable description of what the permission does.",
          "type": "string"
        },
        "permissions": {
          "description": "All permissions this set contains.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionKind"
          }
        }
      }
    },
    "Permission": {
      "description": "Descriptions of explicit privileges of commands.\n\nIt can enable commands to be accessible in the frontend of the application.\n\nIf the scope is defined it can be used to fine grain control the access of individual or multiple commands.",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "version": {
          "description": "The version of the permission.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 1.0
        },
        "identifier": {
          "description": "A unique identifier for the permission.",
          "type": "string"
        },
        "description": {
          "description": "Human-readable description of what the permission does. Tauri internal convention is to use `<h4>` headings in markdown content for Tauri documentation generation purposes.",
          "type": [
            "string",
            "null"
          ]
        },
        "commands": {
          "description": "Allowed or denied commands when using this permission.",
          "default": {
            "allow": [],
            "deny": []
          },
          "allOf": [
            {
              "$ref": "#/definitions/Commands"
            }
          ]
        },
        "scope": {
          "description": "Allowed or denied scoped when using this permission.",
          "allOf": [
            {
              "$ref": "#/definitions/Scopes"
            }
          ]
        },
        "platforms": {
          "description": "Target platforms this permission applies. By default all platforms are affected by this permission.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "Commands": {
      "description": "Allowed and denied commands inside a permission.\n\nIf two commands clash inside of `allow` and `deny`, it should be denied by default.",
      "type": "object",
      "properties": {
        "allow": {
          "description": "Allowed command.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deny": {
          "description": "Denied command, which takes priority.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Scopes": {
      "description": "An argument for fine grained behavior control of Tauri commands.\n\nIt can be of any serde serializable type and is used to allow or prevent certain actions inside a Tauri command. The configured scope is passed to the command and will be enforced by the command implementation.\n\n## Example\n\n```json { \"allow\": [{ \"path\": \"$HOME/**\" }], \"deny\": [{ \"path\": \"$HOME/secret.txt\" }] } ```",
      "type": "object",
      "properties": {
        "allow": {
          "description": "Data that defines what is allowed by the scope.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        "deny": {
          "description": "Data that defines what is denied by the scope. This should be prioritized by validation logic.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Value"
          }
        }
      }
    },
    "Value": {
      "description": "All supported ACL values.",
      "anyOf": [
        {
          "description": "Represents a null JSON value.",
          "type": "null"
        },
        {
          "description": "Represents a [`bool`].",
          "type": "boolean"
        },
        {
          "description": "Represents a valid ACL [`Number`].",
          "allOf": [
            {
              "$ref": "#/definitions/Number"
            }
          ]
        },
        {
          "description": "Represents a [`String`].",
          "type": "string"
        },
        {
          "description": "Represents a list of other [`Value`]s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        {
          "description": "Represents a map of [`String`] keys to [`Value`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Value"
          }
        }
      ]
    },
    "Number": {
      "description": "A valid ACL number.",
      "anyOf": [
        {
          "description": "Represents an [`i64`].",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "Represents a [`f64`].",
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Target": {
      "description": "Platform target.",
      "oneOf": [
        {
          "description": "MacOS.",
          "type": "string",
          "enum": [
            "macOS"
          ]
        },
        {
          "description": "Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "Android.",
          "type": "string",
          "enum": [
            "android"
          ]
        },
        {
          "description": "iOS.",
          "type": "string",
          "enum": [
            "iOS"
          ]
        }
      ]
    },
    "PermissionKind": {
      "type": "string",
      "oneOf": [
        {
          "description": "Enables the add_to_library command without any pre-configured scope.",
          "type": "string",
          "const": "allow-add-to-library",
          "markdownDescription": "Enables the add_to_library command without any pre-configured scope."
        },
        {
          "description": "Denies the add_to_library command without any pre-configured scope.",
          "type": "string",
          "const": "deny-add-to-library",
          "markdownDescription": "Denies the add_to_library command without any pre-configured scope."
        },
        {
          "description": "Enables the check_permissions command without any pre-configured scope.",
          "type": "string",
          "const": "allow-check-permissions",
          "markdownDescription": "Enables the check_permissions command without any pre-configured scope."
        },
        {
          "description": "Denies the check_permissions command without any pre-configured scope.",
          "type": "string",
          "const": "deny-check-permissions",
          "markdownDescription": "Denies the check_permissions command without any pre-configured scope."
        },
        {
          "description": "Enables the create_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "allow-create-playlist",
          "markdownDescription": "Enables the create_playlist command without any pre-configured scope."
        },
        {
          "description": "Denies the create_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "deny-create-playlist",
          "markdownDescription": "Denies the create_playlist command without any pre-configured scope."
        },
        {
          "description": "Enables the delete_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "allow-delete-playlist",
          "markdownDescription": "Enables the delete_playlist command without any pre-configured scope."
        },
        {
          "description": "Denies the delete_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "deny-delete-playlist",
          "markdownDescription": "Denies the delete_playlist command without any pre-configured scope."
        },
        {
          "description": "Enables the get_album command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-album",
          "markdownDescription": "Enables the get_album command without any pre-configured scope."
        },
        {
          "description": "Denies the get_album command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-album",
          "markdownDescription": "Denies the get_album command without any pre-configured scope."
        },
        {
          "description": "Enables the get_albums command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-albums",
          "markdownDescription": "Enables the get_albums command without any pre-configured scope."
        },
        {
          "description": "Denies the get_albums command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-albums",
          "markdownDescription": "Denies the get_albums command without any pre-configured scope."
        },
        {
          "description": "Enables the get_artist command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-artist",
          "markdownDescription": "Enables the get_artist command without any pre-configured scope."
        },
        {
          "description": "Denies the get_artist command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-artist",
          "markdownDescription": "Denies the get_artist command without any pre-configured scope."
        },
        {
          "description": "Enables the get_artists command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-artists",
          "markdownDescription": "Enables the get_artists command without any pre-configured scope."
        },
        {
          "description": "Denies the get_artists command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-artists",
          "markdownDescription": "Denies the get_artists command without any pre-configured scope."
        },
        {
          "description": "Enables the get_genres command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-genres",
          "markdownDescription": "Enables the get_genres command without any pre-configured scope."
        },
        {
          "description": "Denies the get_genres command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-genres",
          "markdownDescription": "Denies the get_genres command without any pre-configured scope."
        },
        {
          "description": "Enables the get_library_status command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-library-status",
          "markdownDescription": "Enables the get_library_status command without any pre-configured scope."
        },
        {
          "description": "Denies the get_library_status command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-library-status",
          "markdownDescription": "Denies the get_library_status command without any pre-configured scope."
        },
        {
          "description": "Enables the get_now_playing command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-now-playing",
          "markdownDescription": "Enables the get_now_playing command without any pre-configured scope."
        },
        {
          "description": "Denies the get_now_playing command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-now-playing",
          "markdownDescription": "Denies the get_now_playing command without any pre-configured scope."
        },
        {
          "description": "Enables the get_playback_state command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-playback-state",
          "markdownDescription": "Enables the get_playback_state command without any pre-configured scope."
        },
        {
          "description": "Denies the get_playback_state command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-playback-state",
          "markdownDescription": "Denies the get_playback_state command without any pre-configured scope."
        },
        {
          "description": "Enables the get_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-playlist",
          "markdownDescription": "Enables the get_playlist command without any pre-configured scope."
        },
        {
          "description": "Denies the get_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-playlist",
          "markdownDescription": "Denies the get_playlist command without any pre-configured scope."
        },
        {
          "description": "Enables the get_playlists command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-playlists",
          "markdownDescription": "Enables the get_playlists command without any pre-configured scope."
        },
        {
          "description": "Denies the get_playlists command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-playlists",
          "markdownDescription": "Denies the get_playlists command without any pre-configured scope."
        },
        {
          "description": "Enables the get_song command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-song",
          "markdownDescription": "Enables the get_song command without any pre-configured scope."
        },
        {
          "description": "Denies the get_song command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-song",
          "markdownDescription": "Denies the get_song command without any pre-configured scope."
        },
        {
          "description": "Enables the get_songs command without any pre-configured scope.",
          "type": "string",
          "const": "allow-get-songs",
          "markdownDescription": "Enables the get_songs command without any pre-configured scope."
        },
        {
          "description": "Denies the get_songs command without any pre-configured scope.",
          "type": "string",
          "const": "deny-get-songs",
          "markdownDescription": "Denies the get_songs command without any pre-configured scope."
        },
        {
          "description": "Enables the pause command without any pre-configured scope.",
          "type": "string",
          "const": "allow-pause",
          "markdownDescription": "Enables the pause command without any pre-configured scope."
        },
        {
          "description": "Denies the pause command without any pre-configured scope.",
          "type": "string",
          "const": "deny-pause",
          "markdownDescription": "Denies the pause command without any pre-configured scope."
        },
        {
          "description": "Enables the play_item command without any pre-configured scope.",
          "type": "string",
          "const": "allow-play-item",
          "markdownDescription": "Enables the play_item command without any pre-configured scope."
        },
        {
          "description": "Denies the play_item command without any pre-configured scope.",
          "type": "string",
          "const": "deny-play-item",
          "markdownDescription": "Denies the play_item command without any pre-configured scope."
        },
        {
          "description": "Enables the request_permissions command without any pre-configured scope.",
          "type": "string",
          "const": "allow-request-permissions",
          "markdownDescription": "Enables the request_permissions command without any pre-configured scope."
        },
        {
          "description": "Denies the request_permissions command without any pre-configured scope.",
          "type": "string",
          "const": "deny-request-permissions",
          "markdownDescription": "Denies the request_permissions command without any pre-configured scope."
        },
        {
          "description": "Enables the resume command without any pre-configured scope.",
          "type": "string",
          "const": "allow-resume",
          "markdownDescription": "Enables the resume command without any pre-configured scope."
        },
        {
          "description": "Denies the resume command without any pre-configured scope.",
          "type": "string",
          "const": "deny-resume",
          "markdownDescription": "Denies the resume command without any pre-configured scope."
        },
        {
          "description": "Enables the search_catalog command without any pre-configured scope.",
          "type": "string",
          "const": "allow-search-catalog",
          "markdownDescription": "Enables the search_catalog command without any pre-configured scope."
        },
        {
          "description": "Denies the search_catalog command without any pre-configured scope.",
          "type": "string",
          "const": "deny-search-catalog",
          "markdownDescription": "Denies the search_catalog command without any pre-configured scope."
        },
        {
          "description": "Enables the set_playback_time command without any pre-configured scope.",
          "type": "string",
          "const": "allow-set-playback-time",
          "markdownDescription": "Enables the set_playback_time command without any pre-configured scope."
        },
        {
          "description": "Denies the set_playback_time command without any pre-configured scope.",
          "type": "string",
          "const": "deny-set-playback-time",
          "markdownDescription": "Denies the set_playback_time command without any pre-configured scope."
        },
        {
          "description": "Enables the set_repeat_mode command without any pre-configured scope.",
          "type": "string",
          "const": "allow-set-repeat-mode",
          "markdownDescription": "Enables the set_repeat_mode command without any pre-configured scope."
        },
        {
          "description": "Denies the set_repeat_mode command without any pre-configured scope.",
          "type": "string",
          "const": "deny-set-repeat-mode",
          "markdownDescription": "Denies the set_repeat_mode command without any pre-configured scope."
        },
        {
          "description": "Enables the set_shuffle_mode command without any pre-configured scope.",
          "type": "string",
          "const": "allow-set-shuffle-mode",
          "markdownDescription": "Enables the set_shuffle_mode command without any pre-configured scope."
        },
        {
          "description": "Denies the set_shuffle_mode command without any pre-configured scope.",
          "type": "string",
          "const": "deny-set-shuffle-mode",
          "markdownDescription": "Denies the set_shuffle_mode command without any pre-configured scope."
        },
        {
          "description": "Enables the skip_to_next command without any pre-configured scope.",
          "type": "string",
          "const": "allow-skip-to-next",
          "markdownDescription": "Enables the skip_to_next command without any pre-configured scope."
        },
        {
          "description": "Denies the skip_to_next command without any pre-configured scope.",
          "type": "string",
          "const": "deny-skip-to-next",
          "markdownDescription": "Denies the skip_to_next command without any pre-configured scope."
        },
        {
          "description": "Enables the skip_to_previous command without any pre-configured scope.",
          "type": "string",
          "const": "allow-skip-to-previous",
          "markdownDescription": "Enables the skip_to_previous command without any pre-configured scope."
        },
        {
          "description": "Denies the skip_to_previous command without any pre-configured scope.",
          "type": "string",
          "const": "deny-skip-to-previous",
          "markdownDescription": "Denies the skip_to_previous command without any pre-configured scope."
        },
        {
          "description": "Enables the stop command without any pre-configured scope.",
          "type": "string",
          "const": "allow-stop",
          "markdownDescription": "Enables the stop command without any pre-configured scope."
        },
        {
          "description": "Denies the stop command without any pre-configured scope.",
          "type": "string",
          "const": "deny-stop",
          "markdownDescription": "Denies the stop command without any pre-configured scope."
        },
        {
          "description": "Enables the update_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "allow-update-playlist",
          "markdownDescription": "Enables the update_playlist command without any pre-configured scope."
        },
        {
          "description": "Denies the update_playlist command without any pre-configured scope.",
          "type": "string",
          "const": "deny-update-playlist",
          "markdownDescription": "Denies the update_playlist command without any pre-configured scope."
        }
      ]
    }
  }
}